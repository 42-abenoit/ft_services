nginx_setup () {
echo -en "$STYLE""Setting up Nginx \e[0m"
progress_anim & WPID=$!
docker build -t nginx-local $dir/img/nginx > $dir/logs/nginx.log 2> $dir/logs/nginx.err
kubectl apply -f $dir/conf/nginx.yaml >> $dir/logs/nginx.log 2>> $dir/logs/nginx.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

pma_setup () {
echo -en "$STYLE""Setting up PhpMyAdmin \e[0m"
progress_anim & WPID=$!
docker build -t pma-local $dir/img/pma > $dir/logs/pma.log 2> $dir/logs/pma.err
kubectl apply -f $dir/conf/pma.yaml >> $dir/logs/pma.log 2>> $dir/logs/pma.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

mysql_setup () {
echo -en "$STYLE""Setting up Mysql \e[0m"
progress_anim & WPID=$!
docker build -t mysql-local $dir/img/mysql > $dir/logs/mysql.log 2> $dir/logs/mysql.err
kubectl apply -f $dir/conf/mysql.yaml >> $dir/logs/mysql.log 2>> $dir/logs/mysql.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

wordpress_setup () {
echo -en "$STYLE""Setting up Wordpress \e[0m"
progress_anim & WPID=$!
docker build -t wordpress-local $dir/img/wordpress > $dir/logs/wordpress.log 2> $dir/logs/wordpress.err
kubectl apply -f $dir/conf/wordpress.yaml >> $dir/logs/wordpress.log 2>> $dir/logs/wordpress.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

ftps_setup () {
echo -en "$STYLE""Setting up Ftps \e[0m"
progress_anim & WPID=$!
docker build -t ftps-local $dir/img/ftps > $dir/logs/ftps.log 2> $dir/logs/ftps.err
kubectl apply -f $dir/conf/ftps.yaml >> $dir/logs/ftps.log 2>> $dir/logs/ftps.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

influxdb_setup () {
echo -en "$STYLE""Setting up Influxdb \e[0m"
progress_anim & WPID=$!
docker build -t influxdb-local $dir/img/influxdb > $dir/logs/influxdb.log 2> $dir/logs/influxdb.err
kubectl apply -f $dir/conf/influxdb.yaml >> $dir/logs/influxdb.err 2>> $dir/logs/influxdb.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

grafana_setup () {
echo -en "$STYLE""Setting up Grafana \e[0m"
progress_anim & WPID=$!
docker build -t grafana-local $dir/img/grafana > $dir/logs/grafana.logs 2> $dir/logs/grafana.err
kubectl apply -f $dir/conf/grafana.yaml >> $dir/logs/grafana.logs 2> $dir/logs/grafana.err
kill $WPID >/dev/null 2>/dev/null
wait $WPID >/dev/null 2>/dev/null
print_success
return 0
}

pods_checkup () {
STYLE="\e[1m\e[36m"
echo -e "$STYLE""\nWaiting for all pods to run\e[0m"
pnum=0
tries=0
while [ $pnum -lt 7 -a $tries -lt 90 ]
do
echo -en "\r"
pnum=0
if [[ $(kubectl get pods | grep nginx | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep phpmyadmin | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep mysql | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep wordpress | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep ftps | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep grafana | awk '{print $2}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
if [[ $(kubectl get pods | grep influxdb | awk '{print $1}')=="1/1" ]]
then
	pnum=$((pnum + 1))
fi
echo -en "$STYLE""\nPods running: $pnum/7\e[0m"
sleep 2
num+=1
done
if [ $pnum -eq 7 ]
then
	echo -e "$STYLE""\nAll pods are running !"
else
	echo -e "$STYLE""\nThere was an error during minikube setup."
	echo -e "$STYLE""Clean minikube cluster and run the install script again !"
	exit 1
fi
}
